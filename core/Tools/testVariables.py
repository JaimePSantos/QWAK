import numpy as np
import networkx as nx

stochasticProbDistSingleNodeCycleNoise = [0.015553545002182053, 0.013458857662115502, 0.012057701052087894, 0.011728960285488265, 0.012387238183654423, 0.012291193834532484, 0.010932746969822379, 0.012532190469918781, 0.00846615165104256, 0.007144863463632757, 0.004712084449890296, 0.013373254166923169, 0.016435152601547383, 0.018615452367358377, 0.01879214450550401, 0.018940873240511642, 0.018724492719938608, 0.01931808296796306, 0.020261967508570688, 0.02069194461322641, 0.02208795908459623, 0.02191315687492794, 0.021263765128394344, 0.021346325397237974, 0.021557756924766924, 0.0216801256864053, 0.023437268578867885, 0.022005811120059518, 0.020928673083324266, 0.020765425205778704, 0.0213275021943805, 0.02088430249845811, 0.019948395878038715, 0.020119112172905934, 0.019199049125039686, 0.019440330221102562, 0.018650337476800387, 0.0183477299446497, 0.017837933214116235, 0.017125705456371175, 0.01819284057164987, 0.016337537115660425, 0.016546718044723085, 0.019140083338323347, 0.015844947733059993, 0.015992443444345503, 0.016511541173184326, 0.015558130206562529, 0.013921677581159373, 0.013618559439192116, 0.14204995837000622] 

probDistUniformSuperpositionCycle = [np.array([2.33566948e-23]), np.array([2.33555206e-23]), np.array([3.21405954e-22]), np.array([4.50789548e-21]), np.array([6.02254352e-20]), np.array([7.65703867e-19]), np.array([9.25021994e-18]), np.array([1.06018847e-16]), np.array([1.15088494e-15]), np.array([1.18120087e-14]), np.array([1.14399471e-13]), np.array([1.04335083e-12]), np.array([8.9405336e-12]), np.array([7.18051426e-11]), np.array([5.39059828e-10]), np.array([3.77154328e-09]), np.array([2.45117022e-08]), np.array([1.47436596e-07]), np.array([8.1737139e-07]), np.array([4.15696157e-06]), np.array([1.92899538e-05]), np.array([8.1162648e-05]), np.array([0.00030734]), np.array([0.00103811]), np.array([0.00309318]), np.array([0.00801674]), np.array([0.0177387]), np.array([0.03264987]), np.array([0.04807663]), np.array([0.05307457]), np.array([0.03873662]), np.array([0.01405194]), np.array([0.005279]), np.array([0.02110154]), np.array([0.03059605]), np.array([0.01457536]), np.array([0.00771127]), np.array([0.0225105]), np.array([0.01820895]), np.array([0.00800278]), np.array([0.01940289]), np.array([0.01472733]), np.array([0.0105186]), np.array([0.01830804]), np.array([0.01053605]), np.array([0.01525312]), np.array([0.01317469]), np.array([0.0130088]), np.array([0.01394557]), np.array([0.01280537]), np.array([0.01344478]), np.array([0.01344478]), np.array([0.01280537]), np.array([0.01394557]), np.array([0.0130088]), np.array([0.01317469]), np.array([0.01525312]), np.array([0.01053605]), np.array([0.01830804]), np.array([0.0105186]), np.array([0.01472733]), np.array([0.01940289]), np.array([0.00800278]), np.array([0.01820895]), np.array([0.0225105]), np.array([0.00771127]), np.array([0.01457536]), np.array([0.03059605]), np.array([0.02110154]), np.array([0.005279]), np.array([0.01405194]), np.array([0.03873662]), np.array([0.05307457]), np.array([0.04807663]), np.array([0.03264987]), np.array([0.0177387]), np.array([0.00801674]), np.array([0.00309318]), np.array([0.00103811]), np.array([0.00030734]), np.array([8.1162648e-05]), np.array([1.92899538e-05]), np.array([4.15696157e-06]), np.array([8.1737139e-07]), np.array([1.47436596e-07]), np.array([2.45117022e-08]), np.array([3.77154328e-09]), np.array([5.39059828e-10]), np.array([7.18051426e-11]), np.array([8.9405336e-12]), np.array([1.04335083e-12]), np.array([1.14399471e-13]), np.array([1.18120087e-14]), np.array([1.15088495e-15]), np.array([1.06018845e-16]), np.array([9.25021946e-18]), np.array([7.6570362e-19]), np.array([6.02252446e-20]), np.array([4.50786872e-21]), np.array([3.21394285e-22])]


probDistUniformSuperpositionComplete =[np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([0.49992348]),np.array([0.49992348]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06]),np.array([1.56167099e-06])]

probDistUniformSuperpositionCycleOriented = [np.array([2.35020862e-24]),np.array([3.21233582e-23]),np.array([4.78936861e-22]),np.array([6.75775628e-21]),np.array([9.09278142e-20]),np.array([1.16447869e-18]),np.array([1.4174074e-17]),np.array([1.63725583e-16]),np.array([1.79177273e-15]),np.array([1.85449672e-14]),np.array([1.81183627e-13]),np.array([1.66750579e-12]),np.array([1.44244933e-11]),np.array([1.16993066e-10]),np.array([8.87331871e-10]),np.array([6.27480428e-09]),np.array([4.12367865e-08]),np.array([2.50932194e-07]),np.array([1.40809229e-06]),np.array([7.25237511e-06]),np.array([3.41012324e-05]),np.array([0.00014547]),np.array([0.00055884]),np.array([0.00191597]),np.array([0.00579778]),np.array([0.01526616]),np.array([0.03432121]),np.array([0.06414353]),np.array([0.09566778]),np.array([0.10611804]),np.array([0.07539385]),np.array([0.02108755]),np.array([0.00123299]),np.array([0.03815227]),np.array([0.06105078]),np.array([0.02099907]),np.array([0.00315243]),np.array([0.04332176]),np.array([0.03107889]),np.array([0.00046039]),np.array([0.03673346]),np.array([0.02083657]),np.array([0.00540454]),np.array([0.03656229]),np.array([0.0021435]),np.array([0.02572883]),np.array([0.01367394]),np.array([0.0125127]),np.array([0.0209437]),np.array([0.00612108]),np.array([0.02210639]),np.array([0.00478318]),np.array([0.01948966]),np.array([0.00694745]),np.array([0.01350489]),np.array([0.01267544]),np.array([0.0047774]),np.array([0.0189286]),np.array([5.37801032e-05]),np.array([0.01563266]),np.array([0.0086181]),np.array([0.00207232]),np.array([0.01554517]),np.array([0.00533901]),np.array([0.00169923]),np.array([0.01227011]),np.array([0.00815166]),np.array([0.00014131]),np.array([0.00405082]),np.array([0.009325]),np.array([0.00701633]),np.array([0.00207939]),np.array([3.11126938e-05]),np.array([0.00048547]),np.array([0.0011562]),np.array([0.0011562]),np.array([0.00076732]),np.array([0.00038859]),np.array([0.00016024]),np.array([5.58498619e-05]),np.array([1.68532141e-05]),np.array([4.47867532e-06]),np.array([1.06154803e-06]),np.array([2.26650488e-07]),np.array([4.39409985e-08]),np.array([7.78661794e-09]),np.array([1.26828227e-09]),np.array([1.90787784e-10]),np.array([2.66172193e-11]),np.array([3.45657385e-12]),np.array([4.19195857e-13]),np.array([4.7615315e-14]),np.array([5.0790502e-15]),np.array([5.09997117e-16]),np.array([4.83120962e-17]),np.array([4.32638107e-18]),np.array([3.6691029e-19]),np.array([2.95419643e-20]),np.array([2.23660995e-21]),np.array([1.87258863e-22])]

probDistUniformSuperpositionPath = [np.array([1.51421884e-24]),np.array([2.18690187e-23]),np.array([3.21483865e-22]),np.array([4.5076088e-21]),np.array([6.02255757e-20]),np.array([7.6570278e-19]),np.array([9.25021933e-18]),np.array([1.06018842e-16]),np.array([1.15088493e-15]),np.array([1.18120087e-14]),np.array([1.14399471e-13]),np.array([1.04335083e-12]),np.array([8.9405336e-12]),np.array([7.18051426e-11]),np.array([5.39059828e-10]),np.array([3.77154328e-09]),np.array([2.45117022e-08]),np.array([1.47436596e-07]),np.array([8.1737139e-07]),np.array([4.15696157e-06]),np.array([1.92899538e-05]),np.array([8.1162648e-05]),np.array([0.00030734]),np.array([0.00103811]),np.array([0.00309318]),np.array([0.00801674]),np.array([0.0177387]),np.array([0.03264987]),np.array([0.04807663]),np.array([0.05307457]),np.array([0.03873662]),np.array([0.01405194]),np.array([0.005279]),np.array([0.02110154]),np.array([0.03059605]),np.array([0.01457536]),np.array([0.00771127]),np.array([0.0225105]),np.array([0.01820895]),np.array([0.00800278]),np.array([0.01940289]),np.array([0.01472733]),np.array([0.0105186]),np.array([0.01830804]),np.array([0.01053605]),np.array([0.01525312]),np.array([0.01317469]),np.array([0.0130088]),np.array([0.01394557]),np.array([0.01280537]),np.array([0.01344478]),np.array([0.01344478]),np.array([0.01280537]),np.array([0.01394557]),np.array([0.0130088]),np.array([0.01317469]),np.array([0.01525312]),np.array([0.01053605]),np.array([0.01830804]),np.array([0.0105186]),np.array([0.01472733]),np.array([0.01940289]),np.array([0.00800278]),np.array([0.01820895]),np.array([0.0225105]),np.array([0.00771127]),np.array([0.01457536]),np.array([0.03059605]),np.array([0.02110154]),np.array([0.005279]),np.array([0.01405194]),np.array([0.03873662]),np.array([0.05307457]),np.array([0.04807663]),np.array([0.03264987]),np.array([0.0177387]),np.array([0.00801674]),np.array([0.00309318]),np.array([0.00103811]),np.array([0.00030734]),np.array([8.1162648e-05]),np.array([1.92899538e-05]),np.array([4.15696157e-06]),np.array([8.1737139e-07]),np.array([1.47436596e-07]),np.array([2.45117022e-08]),np.array([3.77154328e-09]),np.array([5.39059828e-10]),np.array([7.18051426e-11]),np.array([8.9405336e-12]),np.array([1.04335083e-12]),np.array([1.14399471e-13]),np.array([1.18120087e-14]),np.array([1.15088492e-15]),np.array([1.06018845e-16]),np.array([9.25022329e-18]),np.array([7.65698092e-19]),np.array([6.02298186e-20]),np.array([4.50632786e-21]),np.array([3.44285947e-22])]

stochasticProbDistSingleNodeCycleNoNoise = [7.802510159267334e-13, 2.6408842952581064e-12, 4.245023729414469e-11, 5.355549516149254e-10, 6.144805360132045e-09, 6.310796404195852e-08, 5.760729047866085e-07, 4.632264744822876e-06, 3.2464915349657026e-05, 0.00019576073305350005, 0.0009993610695823907, 0.004230224762915064, 0.014435490220610385, 0.03813435164299789, 0.07312302975408722, 0.09028589203402414, 0.053074941607063435, 0.002033654591808467, 0.028987324556511443, 0.05940054378876583, 0.005398067095384646, 0.033307391600249696, 0.03807580389802922, 0.007216221293062103, 0.04992555057446302, 0.002277295381173645, 0.049925550574463025, 0.0072162212930620764, 0.038075803898029226, 0.03330739160024968, 0.005398067095384619, 0.059400543788765796, 0.028987324556511443, 0.002033654591808459, 0.05307494160706341, 0.09028589203402412, 0.07312302975408726, 0.0381343516429979, 0.014435490220610386, 0.004230224762915065, 0.000999361069582391, 0.00019576073305350018, 3.246491534965704e-05, 4.632264744822877e-06, 5.760729047866086e-07, 6.310796404195854e-08, 6.144805360132048e-09, 5.355549516149256e-10, 4.245023729414468e-11, 2.6408842952581064e-12]

n=100
H = nx.cycle_graph(n,create_using=nx.DiGraph)
G = H.reverse()
alpha=np.pi/2

for u,v,d in H.edges(data=True):
    d["weight"] = np.exp(1j*alpha)
    mat = np.matrix(d["weight"])

for u,v,d in G.edges(data=True):
    d["weight"] = np.exp(-1j*alpha)
    mat = np.matrix(d["weight"])

orientedGraph = nx.compose(H,G)
